
import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Search } from 'lucide-react';
import AppHeader from '@/components/AppHeader';
import BottomNavigation from '@/components/BottomNavigation';

interface Notification {
  id: number;
  message: string;
  time: string;
  date: string;
  type: 'ÿ≠ÿ¨ÿ≤' | 'ÿ•ŸÑÿ∫ÿßÿ°' | 'ÿ™ÿ≥ŸÑŸäŸÖ' | 'ÿ•ÿ∂ÿßŸÅÿ©' | 'ÿ™ŸÜÿ®ŸäŸá';
  isRead: boolean;
  details?: string;
}

const Notifications = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedType, setSelectedType] = useState('ÿßŸÑŸÉŸÑ');
  const types = ['ÿßŸÑŸÉŸÑ', 'ÿ≠ÿ¨ÿ≤', 'ÿ™ÿ≥ŸÑŸäŸÖ', 'ÿ•ŸÑÿ∫ÿßÿ°', 'ÿ•ÿ∂ÿßŸÅÿ©', 'ÿ™ŸÜÿ®ŸäŸá'];

  const [notifications, setNotifications] = useState<Notification[]>([
    {
      id: 1,
      message: 'ÿ™ŸÖ ÿ≠ÿ¨ÿ≤ 200 ŸÑŸàÿ≠ ÿ∑ÿßŸÇÿ© ŸÖŸÜ ÿßŸÑŸÄ 170 ŸÖŸÜ ÿßŸÑŸÄ HST',
      time: '10:30 ÿµ',
      date: '2024-01-15',
      type: 'ÿ≠ÿ¨ÿ≤',
      isRead: false,
      details: 'ÿ™ŸÖ ÿ≠ÿ¨ÿ≤ 200 Ÿàÿ≠ÿØÿ© ŸÖŸÜ ÿ£ŸÑŸàÿßÿ≠ ÿ¥ŸÖÿ≥Ÿäÿ© 300 Ÿàÿßÿ™'
    },
    {
      id: 2,
      message: 'ÿ™ŸÖ ÿßŸÑÿ∫ÿßÿ° ÿßŸÑÿ≠ÿ¨ÿ≤ 200 ŸÑŸàÿ≠ ÿ∑ÿßŸÇÿ© ŸÖŸÜ ÿßŸÑŸÄ 170 ŸÖŸÜ ÿßŸÑŸÄ HST',
      time: '09:15 ÿµ',
      date: '2024-01-15',
      type: 'ÿ•ŸÑÿ∫ÿßÿ°',
      isRead: true,
      details: 'ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿ≠ÿ¨ÿ≤ 200 Ÿàÿ≠ÿØÿ© ŸÖŸÜ ÿ£ŸÑŸàÿßÿ≠ ÿ¥ŸÖÿ≥Ÿäÿ©'
    },
    {
      id: 3,
      message: 'ÿ™ŸÖ ÿ≠ÿ¨ÿ≤ 10 ÿ®ÿ∑ÿßÿ±Ÿäÿßÿ™ ŸÖŸÜ ÿßŸÑŸÜŸàÿπ X',
      time: '08:45 ÿµ',
      date: '2024-01-15',
      type: 'ÿ≠ÿ¨ÿ≤',
      isRead: true,
      details: 'ÿ™ŸÖ ÿ≠ÿ¨ÿ≤ 10 ÿ®ÿ∑ÿßÿ±Ÿäÿßÿ™ ŸÑŸäÿ´ŸäŸàŸÖ ŸÖŸÜ ÿßŸÑŸÜŸàÿπ X'
    },
    {
      id: 4,
      message: 'ÿ™ŸÖ ÿ™ÿ≥ŸÑŸäŸÖ 300 ŸÑŸàÿ≠ ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y ŸÑÿ™ÿµŸÑ ŸÑŸÑÿπÿØÿØ 715',
      time: '07:30 ÿµ',
      date: '2024-01-15',
      type: 'ÿ™ÿ≥ŸÑŸäŸÖ',
      isRead: false,
      details: 'ÿ™ŸÖ ÿ™ÿ≥ŸÑŸäŸÖ 300 ŸÑŸàÿ≠ ÿ¥ŸÖÿ≥Ÿä ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y ÿ®ŸÜÿ¨ÿßÿ≠'
    },
    {
      id: 5,
      message: 'ÿ™ŸÖ ÿßÿ∂ÿßŸÅÿ© 10 ŸÇÿ∑ÿπÿßÿ™ ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y',
      time: '06:20 ŸÖ',
      date: '2024-01-14',
      type: 'ÿ•ÿ∂ÿßŸÅÿ©',
      isRead: true,
      details: 'ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© 10 ŸÇÿ∑ÿπ ÿ¨ÿØŸäÿØÿ© ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y ŸÑŸÑŸÖÿÆÿ≤ŸàŸÜ'
    },
    {
      id: 6,
      message: 'ÿ™ŸÖ ÿßŸÑÿ∫ÿßÿ° ÿßŸÑÿ≠ÿ¨ÿ≤ 100 ŸÇÿ∑ÿπÿ© ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y',
      time: '05:10 ŸÖ',
      date: '2024-01-14',
      type: 'ÿ•ŸÑÿ∫ÿßÿ°',
      isRead: true,
      details: 'ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿ≠ÿ¨ÿ≤ 100 ŸÇÿ∑ÿπÿ© ŸÖŸÜ ÿßŸÑŸÜŸàÿπ Y'
    }
  ]);

  const filteredNotifications = notifications.filter(notification => {
    const matchesSearch = notification.message.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = selectedType === 'ÿßŸÑŸÉŸÑ' || notification.type === selectedType;
    return matchesSearch && matchesType;
  });

  const getNotificationColor = (type: string) => {
    switch (type) {
      case 'ÿ≠ÿ¨ÿ≤':
        return 'bg-blue-100 text-blue-800';
      case 'ÿ™ÿ≥ŸÑŸäŸÖ':
        return 'bg-green-100 text-green-800';
      case 'ÿ•ŸÑÿ∫ÿßÿ°':
        return 'bg-red-100 text-red-800';
      case 'ÿ•ÿ∂ÿßŸÅÿ©':
        return 'bg-purple-100 text-purple-800';
      case 'ÿ™ŸÜÿ®ŸäŸá':
        return 'bg-orange-100 text-orange-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'ÿ≠ÿ¨ÿ≤':
        return 'üìù';
      case 'ÿ™ÿ≥ŸÑŸäŸÖ':
        return '‚úÖ';
      case 'ÿ•ŸÑÿ∫ÿßÿ°':
        return '‚ùå';
      case 'ÿ•ÿ∂ÿßŸÅÿ©':
        return '‚ûï';
      case 'ÿ™ŸÜÿ®ŸäŸá':
        return '‚ö†Ô∏è';
      default:
        return 'üì¢';
    }
  };

  const markAsRead = (id: number) => {
    setNotifications(prev => prev.map(notification => 
      notification.id === id ? { ...notification, isRead: true } : notification
    ));
  };

  const markAllAsRead = () => {
    setNotifications(prev => prev.map(notification => ({ ...notification, isRead: true })));
  };

  const unreadCount = notifications.filter(n => !n.isRead).length;

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      <AppHeader 
        title="ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™" 
        subtitle={unreadCount > 0 ? `${unreadCount} ÿ•ÿ¥ÿπÿßÿ± ÿ∫Ÿäÿ± ŸÖŸÇÿ±Ÿàÿ°` : undefined}
        showBackButton={true}
      />

      {/* Filter and Search */}
      <div className="bg-white p-4 border-b">
        <div className="flex items-center justify-between mb-4">
          <div className="flex gap-2 overflow-x-auto">
            {types.slice(0, 4).map((type) => (
              <Button
                key={type}
                variant={selectedType === type ? "default" : "outline"}
                size="sm"
                onClick={() => setSelectedType(type)}
                className={`whitespace-nowrap ${
                  selectedType === type 
                    ? 'bg-blue-600 text-white' 
                    : 'text-gray-600 border-gray-300'
                }`}
              >
                {type}
              </Button>
            ))}
          </div>
          {unreadCount > 0 && (
            <Button
              variant="ghost"
              size="sm"
              onClick={markAllAsRead}
              className="text-blue-600 text-xs"
            >
              ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑŸÉŸÑ
            </Button>
          )}
        </div>

        <div className="relative">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pr-10 border-gray-300"
          />
        </div>
      </div>

      {/* Notifications List */}
      <div className="p-4 space-y-3">
        {filteredNotifications.map((notification) => (
          <Card
            key={notification.id}
            className={`bg-white shadow-sm border cursor-pointer transition-all ${
              !notification.isRead ? 'border-r-4 border-r-blue-500 bg-blue-50/30' : 'border-gray-200'
            }`}
            onClick={() => markAsRead(notification.id)}
          >
            <CardContent className="p-4">
              <div className="flex items-start gap-3">
                <span className="text-lg">{getNotificationIcon(notification.type)}</span>
                <div className="flex-1">
                  <div className="flex items-start justify-between mb-2">
                    <Badge className={getNotificationColor(notification.type)} variant="secondary">
                      {notification.type}
                    </Badge>
                    <div className="text-xs text-gray-500 text-left">
                      <div>{notification.time}</div>
                      <div>{notification.date}</div>
                    </div>
                  </div>
                  <p className={`text-sm mb-2 ${!notification.isRead ? 'font-medium text-gray-800' : 'text-gray-600'}`}>
                    {notification.message}
                  </p>
                  {notification.details && (
                    <p className="text-xs text-gray-500 bg-gray-50 p-2 rounded-lg">
                      {notification.details}
                    </p>
                  )}
                  {!notification.isRead && (
                    <div className="flex items-center gap-2 mt-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <span className="text-xs text-blue-600 font-medium">ÿ¨ÿØŸäÿØ</span>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}

        {filteredNotifications.length === 0 && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Search className="h-8 w-8 text-blue-600" />
            </div>
            <p className="text-gray-500">ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™</p>
          </div>
        )}
      </div>

      <BottomNavigation />
    </div>
  );
};

export default Notifications;
